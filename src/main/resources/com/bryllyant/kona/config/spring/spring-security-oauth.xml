<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/security/oauth2
        http://www.springframework.org/schema/security/spring-security-oauth2.xsd
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security-4.0.xsd">



	<beans:bean id="tokenStore"
		class="com.bryllyant.kona.api.security.oauth2.OAuth2TokenStore" />


	<beans:bean id="tokenServices"
		class="com.bryllyant.kona.api.security.oauth2.OAuth2TokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="true" />
		<beans:property name="reuseRefreshToken" value="false" />
		<beans:property name="clientDetailsService" ref="clientAuthService" />
	</beans:bean>


    <!-- 
        DO NOT include a userApprovalHandler for now since the default TokenStoreUserApprovalHandler
        checks to see if there's a token immediately after the user logs in.  Since the login process
        actually creates a token, the user is never presented with the option to "approve or deny"
        the OAUTH Authorization Request.  
        
        TODO: Create custom class that handles this logic to determine if a newly created
        token has been really approved or not.
     -->
     
    <!--  
	<oauth:authorization-server
		client-details-service-ref="clientAuthService" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
    -->

    <beans:bean id="oAuth2RequestFactory"
        class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <beans:constructor-arg ref="clientAuthService" />
    </beans:bean>

    <beans:bean id="userApprovalHandler"
        class="com.bryllyant.kona.api.security.oauth2.OAuth2TokenApprovalHandler">
        <beans:property name="tokenStore" ref="tokenStore" />
        <beans:property name="requestFactory" ref="oAuth2RequestFactory" />
        <beans:property name="clientDetailsService" ref="clientAuthService" />
    </beans:bean>
    
	<!-- authorization-server aka AuthorizationServerTokenServices is an interface 
		that defines everything necessary for token management -->
	<oauth:authorization-server
		client-details-service-ref="clientAuthService" 
		token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
        <!--
        <oauth:custom-grant token-granter-ref="tokenGranter" />
        -->
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter" token-services-ref="tokenServices" />

	<beans:bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientAuthService" />
	</beans:bean>

	<beans:bean id="oauthEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="secure" />
	</beans:bean>

	<beans:bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />


	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="clientAuthManager" />
	</beans:bean>

	<!-- <beans:bean id="corsFilter" class="com.porterhead.filter.spring.SpringCrossOriginResourceSharingFilter"/> 
		<beans:bean id="oauthRestEntryPoint" class="OAuth2RestEntryPoint"
		/> -->


</beans:beans>
