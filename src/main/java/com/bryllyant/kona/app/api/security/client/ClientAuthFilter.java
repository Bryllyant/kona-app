/*
 * Copyright (C) 2017 Bryllyant, Inc.  All Rights Reserved.
 */
package com.bryllyant.kona.app.api.security.client;

import com.bryllyant.kona.app.api.security.token.AccessToken;
import com.bryllyant.kona.app.api.service.ApiAuthService;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.web.filter.GenericFilterBean;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * This filter starts the token validation flow. It extracts the token from the
 * configured header name, and pass it to the {@link RestAuthenticationProvider}
 * .
 *
 * This filter, when applied, is incompatible with traditional browser-based
 * Spring Security Core redirects. Users have to make sure it's applied only to
 * REST endpoint URL's.
 *
 * If the authentication is successful, the result is stored in the security
 * context and the response is generated by the
 * {@link AuthenticationSuccessHandler}. Otherwise, an
 * {@link AuthenticationFailureHandler} is called.
 */
public class ClientAuthFilter extends GenericFilterBean {
	private static Logger logger = Logger.getLogger(ClientAuthFilter.class);
    
	@Autowired
	private ApiAuthService apiAuthService;

	@Autowired
	private ClientAuthProvider clientAuthProvider;


	// have the client go to this url to actually get their token as a JSON response
	private String validationEndpointUrl = "/oauth/client/token";

	private Boolean active = true;

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		HttpServletRequest httpRequest = (HttpServletRequest) request;
		HttpServletResponse httpResponse = (HttpServletResponse) response;
		AccessToken accessToken = null;

		logger.debug("ClientAuthFilter.doFilter called ...");

		try {
            accessToken = apiAuthService.getClientAccessToken(httpRequest);
            
			if (accessToken == null) {
				throw new UsernameNotFoundException("Client ID invalid or not found.");
			}
			
			logger.debug("Client ID found: " + accessToken.getValue());

			logger.debug("Trying to authenticate the token");
			accessToken = (AccessToken) clientAuthProvider.authenticate(accessToken);

			if (accessToken.isAuthenticated()) {
				logger.debug("Token authenticated. Storing the authentication result in the security context");
				logger.debug("Authentication result: " + accessToken);
				SecurityContextHolder.getContext().setAuthentication(accessToken);

				clientAuthProvider.publishAuthenticationSuccess(accessToken);

				processFilterChain(request, response, chain, accessToken);
			}

		} catch (AuthenticationException ae) {
			logger.debug("Authentication failed: " + ae.getMessage());
			clientAuthProvider.publishAuthenticationFailure(ae, accessToken);
			clientAuthProvider.onAuthenticationFailure(httpRequest, httpResponse, ae);
		}

	}

	private void processFilterChain(ServletRequest request, ServletResponse response, FilterChain chain,
			AccessToken accessToken) throws IOException, ServletException {
		
		HttpServletRequest httpRequest = (HttpServletRequest) request;
		HttpServletResponse httpResponse = (HttpServletResponse) response;

		String uri = httpRequest.getRequestURI();
		String actualUri = uri.replace(httpRequest.getContextPath(), "");

		logger.debug("processFilterChain: actualUri: " + actualUri);

		if (!active) {
			logger.debug("Token validation is disabled. Continuing the filter chain");
			
			if (chain != null) {
				chain.doFilter(request, response);
			}
			
			return;
		}

		if (accessToken != null && accessToken.getValue() != null) {
			if (validationEndpointUrl != null && actualUri.equalsIgnoreCase(validationEndpointUrl)) {
				logger.debug("Validation endpoint called. Generating response.");
				clientAuthProvider.onAuthenticationSuccess(httpRequest, httpResponse, accessToken);
			} else {
				logger.debug("Have token; Continuing the filter chain");
				if (chain != null) {
					chain.doFilter(request, response);
				}
			}
		} else {
			logger.debug("Request does not contain any token. Letting it continue through the filter chain");
			if (chain != null) {
				chain.doFilter(request, response);
			}
		}

	}
}
